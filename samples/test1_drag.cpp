/*config.h is generated by fltk in your system
 * this file is used with fltk 1.3 with gl enabled.
 * compile by: fltk-config --use-gl --compile test1_drag.cpp
 * or something like: g++ -lX11 -lGL 'test1_drag.cpp' -o 'test1_drag'
*/
#include <math.h>
#include <stdio.h>

#include "config.h" //config.h must always be placed before any Fl header
#include <FL/gl.h>
#include <FL/Fl_Box.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Window.H>
#include <FL/Fl_Radio_Light_Button.H>

struct Vec2 { double x,y;};
struct Color { float r,g,b,a;};
#include "../include/vase_renderer_draft1_2.cpp"

void test_draw();
#include "test1_base.cpp"

const int buf_size=20;

Vec2 AP[buf_size]; int size_of_AP=0;
Color AC[buf_size];
double Aw[buf_size];

Fl_Window* main_wnd;
Gl_Window* gl_wnd;
Fl_Slider *weight, *feathering;
Fl_Button *feather, *no_feather_at_cap, *no_feather_at_core;
Fl_Button *jt_miter, *jt_bevel, *jt_round;
Fl_Button *np3, *np4, *np5;

void line_update()
{
	for ( int i=0; i<buf_size; i++)
	{
		Color cc = {0,0,0,0.5};
		AC[i] = cc;
		Aw[i] = weight->value();
	}
}
void line_init( int N)
{
	switch (N)
	{
	case 3:
		AP[0].x=200; AP[0].y=100;
		AP[1].x=100; AP[1].y=200;
		AP[2].x=300; AP[2].y=200;
		size_of_AP = 3;
	break;
	
	case 4:
		AP[0].x=200; AP[0].y=50;
		AP[1].x=100; AP[1].y=150;
		AP[2].x=300; AP[2].y=150;
		AP[3].x=200; AP[3].y=250;
		size_of_AP = 4;
	break;
	
	case 5:
		AP[0].x=60; AP[0].y=250;
		AP[1].x=120; AP[1].y=50;
		AP[2].x=180; AP[2].y=250;
		AP[3].x=240; AP[3].y=50;
		AP[4].x=300; AP[4].y=250;
		size_of_AP = 5;
	break;
	}
	line_update();
	gl_wnd->set_drag_target( AP, size_of_AP); 
}
char get_joint_type()
{
	if ( jt_miter->value())
		return LJ_miter;
	else if ( jt_bevel->value())
		return LJ_bevel;
	else if ( jt_round->value())
		return LJ_round;
	else
		return 0;
}
void enable_glstates()
{
	glEnableClientState(GL_VERTEX_ARRAY);
	glEnableClientState(GL_COLOR_ARRAY);
	
	glDisableClientState(GL_EDGE_FLAG_ARRAY);
	glDisableClientState(GL_FOG_COORD_ARRAY);
	glDisableClientState(GL_INDEX_ARRAY);
	glDisableClientState(GL_NORMAL_ARRAY);
	glDisableClientState(GL_SECONDARY_COLOR_ARRAY);
	glDisableClientState(GL_TEXTURE_COORD_ARRAY);
}
void disable_glstates()
{
	glDisableClientState(GL_VERTEX_ARRAY);
	glDisableClientState(GL_COLOR_ARRAY);
}
void np3_cb(Fl_Widget* W, void*)
{
	line_init(3);
	gl_wnd->redraw();
}
void np4_cb(Fl_Widget* W, void*)
{
	line_init(4);
	gl_wnd->redraw();
}
void np5_cb(Fl_Widget* W, void*)
{
	line_init(5);
	gl_wnd->redraw();
}
void drag_cb(Fl_Widget* W, void*)
{
	gl_wnd->redraw();
}
void make_form()
{
	//weight and feathering
	weight = new Fl_Value_Slider(400,0,200,20,"weight");
	weight->type(FL_HOR_SLIDER);
	feathering = new Fl_Value_Slider(400,40,200,20,"feathering");
	feathering->type(FL_HOR_SLIDER);
	weight->bounds(0.01,20.0);
	feathering->bounds(1.0,10.0);
	weight->callback(drag_cb);
	feathering->callback(drag_cb);
	
	weight->value(6.0);
	feathering->value(1.0);
	
	//feather, no_feather_at_cap, no_feather_at_core
	feather		   = new Fl_Light_Button(400,80,100,15,"feather");
	no_feather_at_cap  = new Fl_Light_Button(450,95,150,15,"no_feather_at_cap");
	no_feather_at_core = new Fl_Light_Button(450,110,150,15,"no_feather_at_core");
	feather		  ->value(1);
	no_feather_at_cap ->value(0);
	no_feather_at_core->value(0);
	feather		  ->callback(drag_cb);
	no_feather_at_cap ->callback(drag_cb);
	no_feather_at_core->callback(drag_cb);
	
	//joint type
	{
	Fl_Group* o = new Fl_Group(400,130,200,100);
		new Fl_Box(400,130,80,15,"joint type:");
		jt_miter = new Fl_Radio_Light_Button(440,145,80,15,"miter");
		jt_bevel = new Fl_Radio_Light_Button(520,145,80,15,"bevel");
		jt_round = new Fl_Radio_Light_Button(440,160,80,15,"round");
	o->end();
	jt_miter->value(1);
	jt_bevel->value(0);
	jt_round->value(0);
	jt_miter->callback(drag_cb);
	jt_bevel->callback(drag_cb);
	jt_round->callback(drag_cb);
	}
	
	//number of points
	np3 = new Fl_Button(400,280,40,20,"3 pts");
	np3->callback(np3_cb);
	np4 = new Fl_Button(440,280,40,20,"4 pts");
	np4->callback(np4_cb);
	np5 = new Fl_Button(480,280,40,20,"5 pts");
	np5->callback(np5_cb);
}
void test_draw()
{
	enable_glstates();
	
	line_update();
	
	polyline_opt opt={0};
	
	opt.feather    = feather->value();
	opt.feathering = feathering->value();
	opt.no_feather_at_cap = no_feather_at_cap->value();
	opt.no_feather_at_core = no_feather_at_core->value();
	opt.joint = get_joint_type();
	
	polyline( AP, AC, Aw, size_of_AP, &opt);
	
	disable_glstates();
}

int main(int argc, char **argv)
{
	vaserend_actual_PPI = 111.94;
	//
	main_wnd = new Fl_Window( 600,300,"test1 (fltk-opengl)");
		make_form(); //initialize
		gl_wnd = new Gl_Window( 0,0,400,300);  gl_wnd->end(); //create gl window
		line_init(3);
	main_wnd->end();
	main_wnd->show();
	main_wnd->redraw();
	
	return Fl::run();
}
